version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: monitoring-timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: monitoring_db
      POSTGRES_USER: monitoring_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-monitoring_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monitoring_user -d monitoring_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: ["postgres", "-c", "shared_preload_libraries=timescaledb", "-c", "max_connections=200"]

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    container_name: monitoring-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Monitoring API Server
  monitoring-server:
    build: .
    container_name: monitoring-server
    restart: unless-stopped
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      
      # Database
      DATABASE_HOST: timescaledb
      DATABASE_PORT: 5432
      DATABASE_NAME: monitoring_db
      DATABASE_USER: monitoring_user
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-monitoring_password}
      DATABASE_SSL: false
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      REDIS_DB: 0
      
      # Authentication
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      API_KEY_SECRET: ${API_KEY_SECRET:-your-api-key-secret-change-in-production}
      BCRYPT_ROUNDS: 12
      
      # Rate Limiting
      RATE_LIMIT_MAX: 1000
      RATE_LIMIT_WINDOW_MS: 3600000
      
      # CORS
      CORS_ORIGIN: "*"
      CORS_CREDENTIALS: true
      
      # WebSocket
      WS_HEARTBEAT_INTERVAL: 30000
      WS_MAX_CONNECTIONS: 1000
      
      # Monitoring
      ALERT_CHECK_INTERVAL: 60000
      RETENTION_DAYS: 30
      BATCH_SIZE: 1000
      
      # Security
      HELMET_CSP_ENABLED: true
      TRUST_PROXY: true
      
      # Performance
      CLUSTER_MODE: false
      WORKER_THREADS: 4
      MAX_PAYLOAD_SIZE: 1048576
      
      # Logging
      LOG_LEVEL: info
    ports:
      - "${SERVER_PORT:-3001}:3001"
    volumes:
      - ./logs:/app/logs
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: monitoring-nginx
    restart: unless-stopped
    depends_on:
      - monitoring-server
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - monitoring-network
    profiles:
      - production

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: monitoring-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring-network
    profiles:
      - monitoring

volumes:
  timescaledb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  monitoring-network:
    driver: bridge
    name: monitoring-network