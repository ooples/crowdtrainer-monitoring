version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: monitoring-postgres
    environment:
      POSTGRES_DB: monitoring_service
      POSTGRES_USER: monitoring
      POSTGRES_PASSWORD: monitoring_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monitoring -d monitoring_service"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - monitoring-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: monitoring-redis
    command: redis-server --appendonly yes --requirepass monitoring_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - monitoring-network

  # API Server
  server:
    build:
      context: .
      dockerfile: ./packages/server/Dockerfile
      target: development
    container_name: monitoring-server
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://monitoring:monitoring_password@postgres:5432/monitoring_service
      REDIS_URL: redis://:monitoring_redis_password@redis:6379
      API_PORT: 8080
      API_HOST: 0.0.0.0
      JWT_SECRET: development-jwt-secret
    ports:
      - "8080:8080"
    volumes:
      - ./packages/server:/app/packages/server
      - ./packages/core:/app/packages/core
      - node_modules_server:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - monitoring-network

  # Dashboard
  dashboard:
    build:
      context: .
      dockerfile: ./packages/dashboard/Dockerfile
      target: development
    container_name: monitoring-dashboard
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXTAUTH_SECRET: development-nextauth-secret
      NEXTAUTH_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./packages/dashboard:/app/packages/dashboard
      - ./packages/core:/app/packages/core
      - ./packages/sdk-react:/app/packages/sdk-react
      - node_modules_dashboard:/app/node_modules
    depends_on:
      - server
    restart: unless-stopped
    networks:
      - monitoring-network

  # Jaeger for distributed tracing (development)
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: monitoring-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    restart: unless-stopped
    networks:
      - monitoring-network

  # Prometheus for metrics collection (development)
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: monitoring-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - monitoring-network

  # Grafana for metrics visualization (development)
  grafana:
    image: grafana/grafana:10.1.0
    container_name: monitoring-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - monitoring-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  node_modules_server:
    driver: local
  node_modules_dashboard:
    driver: local

networks:
  monitoring-network:
    driver: bridge
    name: monitoring-network